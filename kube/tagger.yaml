apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
apiVersion: v1
data:
  username: YWRtaW4=
  password: bW9uZ29hZG1pbg==
  db: YWRtaW4=
  uri: bW9uZ29kYjovL2FkbWluOm1vbmdvYWRtaW5AbW9uZ28tc2VydmljZQ==
kind: Secret
type: Opaque
metadata:
  name: mongo-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo:4.1
        env:
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: db
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: password
        ports:
        - containerPort: 27017
        volumeMounts:
        - mountPath: /data
          name: mongo-data
      volumes:
      - name: mongo-data
        persistentVolumeClaim:
          claimName: mongo-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express-deployment
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - name: mongo-express
        image: mongo-express:0.54.0
        env:
        - name: ME_CONFIG_MONGODB_SERVER
          value: mongo-service
        - name: ME_CONFIG_OPTIONS_EDITORTHEME
          value: ambiance
        - name: ME_CONFIG_MONGODB_AUTH_DATABASE
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: db
        - name: ME_CONFIG_MONGODB_ADMINUSERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: username
        - name: ME_CONFIG_MONGODB_ADMINPASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: password
        - name: ME_CONFIG_BASICAUTH_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: username
        - name: ME_CONFIG_BASICAUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: password
        ports:
        - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
spec:
  selector:
    app: mongo-express
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: query-deployment
  labels:
    app: query
spec:
  replicas: 1
  selector:
    matchLabels:
      app: query
  template:
    metadata:
      labels:
        app: query
    spec:
      containers:
      - name: query
        image: oodapow/coco_query
        env:
        - name: MONGO_URI
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: uri
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: query-service
spec:
  selector:
    app: query
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tagging-deployment
  labels:
    app: tagging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tagging
  template:
    metadata:
      labels:
        app: tagging
    spec:
      containers:
      - name: tagging
        image: oodapow/coco_tagging
        env:
        - name: QUERY_SERVICE_URI
          value: http://query-service:5000
        ports:
        - containerPort: 8082
---
apiVersion: v1
kind: Service
metadata:
  name: tagging-service
spec:
  selector:
    app: tagging
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: psql-pvc
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
apiVersion: v1
data:
  username: cG9zdGdyZXNJZHA=
  password: cG9zdGdyZXMx
  db: dGFnZ2VyLXVzZXJkYg==
  uri: amRiYzpwb3N0Z3Jlc3FsOi8vcG9zdGdyZXMtc2VydmljZTo1NDMyL3RhZ2dlci11c2VyZGI=
kind: Secret
type: Opaque
metadata:
  name: psql-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:9.6
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: psql-secret
              key: db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: psql-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: psql-secret
              key: password
        - name: PGDATA
          value: /data/db
        ports:
        - containerPort: 5432
        volumeMounts:
        - mountPath: /data
          name: psql-data
      volumes:
      - name: psql-data
        persistentVolumeClaim:
          claimName: psql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-deployment
  labels:
    app: user
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user
  template:
    metadata:
      labels:
        app: user
    spec:
      containers:
      - name: user
        image: oodapow/coco_user
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: psql-secret
              key: uri
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: psql-secret
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: psql-secret
              key: password
        ports:
        - containerPort: 8091
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  selector:
    app: user
  ports:
    - protocol: TCP
      port: 8091
      targetPort: 8091
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-deployment
  labels:
    app: client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
      - name: client
        image: oodapow/coco_client
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: client-service
spec:
  selector:
    app: client
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment
  labels:
    app: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: gateway
        image: oodapow/coco_gateway
        ports:
        - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
spec:
  selector:
    app: gateway
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8081
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mongo-network-policy
spec:
  podSelector:
    matchLabels:
      app: mongo
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: query
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: query
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: psql-network-policy
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: user
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: user